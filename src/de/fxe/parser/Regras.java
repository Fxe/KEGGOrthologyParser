/* Generated By:JavaCC: Do not edit this line. Regras.java */
package de.fxe.parser;

import java.util.List;
import java.util.ArrayList;

public class Regras implements RegrasConstants {

/* DEFINITION - > DEF_ELEMENT
 *              | DEFINITION DEF_ELEMENT
 *
 * JavaCC
 * DEFINITION - > (DEF_ELEMENT)+
 */
  final public List<List<String >> parseDefinition() throws ParseException {
   List<List<String >> def = new ArrayList<List<String >>();
   List<List<String >> r_elems;
    label_1:
    while (true) {
      r_elems = DEF_ELEMENT();
                for(List<String > l : r_elems)
                {
                        def.add(l);
                }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENE:
      case 7:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
         {if (true) return def;}
    throw new Error("Missing return statement in function");
  }

/* DEF_ELEMENT - > EXPR
 *               | DEF_ELEMENT '+' EXPR
 *
 * JavaCC
 * DEF_ELEMENT - > EXPR ('+' EXPR)*
 */
  final public List<List<String >> DEF_ELEMENT() throws ParseException {
  List<List<String >> r_;
  List<List<List<String >>> r = new ArrayList<List<List<String >>> ();
    r_ = EXPR();
                r.add(r_);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(6);
      r_ = EXPR();
                     r.add(r_);
    }
    //System.out.println(r);
    //r_.clear();
    //r_.add(AuxUtilities.cartStringConcatProd(r));
    {if (true) return AuxUtilities.cartStringConcatProd2(r);}
    throw new Error("Missing return statement in function");
  }

/* EXPR - > GENE
 *        | '(' ELEMS ')'
 *
 * JavaCC
 * EXPR - > GENE | '(' ELEMS ')'
 */
  final public List<List<String >> EXPR() throws ParseException {
        List<List<String >> exprElements;
        String gTok = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GENE:
      gTok = gene();
        List<String > singleTon = new ArrayList<String >();
                singleTon.add(gTok);
                exprElements = new ArrayList<List<String >>();
        exprElements.add(singleTon);
        {if (true) return exprElements;}
      break;
    case 7:
      jj_consume_token(7);
      exprElements = elems();
      jj_consume_token(8);
         {if (true) return exprElements;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List<List<String >> elems() throws ParseException {
  List<List<String >> elems = new ArrayList<List<String >>();
  List<List<String >> e1;
  List<List<String >> eX;
  List<List<List<String >>> seq = new ArrayList<List<List<String >>>();
    e1 = elem();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(9);
      eX = elem();
            seq.add(eX);
    }
     seq.add(e1);
    //System.out.println("SEQ: " + seq);
        elems = AuxUtilities.cartProd(seq);

//     if (seq.size() == 2)
//     {
//       for (int i = 0; i < seq.get(0).size(); i++)
//       {
//         List<String > element = new ArrayList<String >();
//         element.add(seq.get(0).get(i));
//         //String p1 = seqs.get(0).get(i);
//         for (int j = 0; j < seq.get(1).size(); j++)
//         {
//           //String p2 = seqs.get(1).get(j);
//           //String par = p1 + "+" + p2;
//           element.add(seq.get(1).get(i));
//         }
//         elems.add(element);
//       }
//     } else
//     {
//		System.err.println("not yet implemented.");
//     }
        //elems.add(seq);
        // [ [K02594, K01655] ]
        // [ [K16792+K16793, K01681], [K16792+K16793, K01705] ]
        // [ [K14187, K04517+K13853, K04517+K06209, K00210+K13853, K00210+K06209] ]
        {if (true) return elems;}
    throw new Error("Missing return statement in function");
  }

  final public List<List<String >> elem() throws ParseException {
  String g = null;
  List<List<String >> multiple_terms = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GENE:
      g = gene();
      break;
    case 7:
      jj_consume_token(7);
      multiple_terms = aux();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if ( g != null)
    {
                List<String > singleton = new ArrayList<String >();
                singleton.add(g);
                multiple_terms = new ArrayList<List<String >>();
                multiple_terms.add(singleton);
    }
    //System.out.println("ELEMENTS:" + multiple_terms);
        {if (true) return multiple_terms;}
    throw new Error("Missing return statement in function");
  }

  final public List<List<String >> aux() throws ParseException {
        List<List<String >> ret = new ArrayList< List<String >>();
        List<List<String >> term_ret = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GENE:
      term_ret = multiplos();
        for (List<String > elem : term_ret)
        {
          List<String > singleTon = new ArrayList< String >();
          singleTon.addAll(elem);
          ret.add(singleTon);
        }
      break;
    case 7:
      term_ret = complexo();
  ret.addAll(term_ret);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List<List<String >> multiplos() throws ParseException {
   List<List<String >> multiplos = new ArrayList<List<String >>();
   List<List<String >> multi = new ArrayList<List<String >>();
   List<String > g = new ArrayList<String >();
   String genne =null;
    label_4:
    while (true) {
      genne = gene();
        List<String > aux = new ArrayList<String >();
        aux.add(genne);
        multiplos.add(aux);
        //g.add(genne);

      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GENE:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
    }
    jj_consume_token(8);
        //multiplos.add(g);
        //multiplos=cartesianProduct(multi);
                {if (true) return multiplos;}
    throw new Error("Missing return statement in function");
  }

  final public List<List<String >> complexo() throws ParseException {
        List<List<String >> comb = new ArrayList<List<String >>();
        List<List<String >> seqs = new ArrayList< List<String >>();
        List<String > seq_head;
        List<String > seq_resto;
    jj_consume_token(7);
    seq_head = genes();
    jj_consume_token(8);
    label_5:
    while (true) {
      jj_consume_token(6);
      jj_consume_token(7);
      seq_resto = genes();
      jj_consume_token(8);
    seqs.add(seq_resto);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 6:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
    }
    jj_consume_token(8);
     seqs.add(seq_head);
 //  comb=cartesianProduct(seqs);
//   return comb;
        //System.out.println("LOL" + seqs);
        List<String > l_par = new ArrayList<String > ();
     if (seqs.size() == 2)
     {
       for (int i = 0; i < seqs.get(0).size(); i++)
       {
         String p1 = seqs.get(0).get(i);
         for (int j = 0; j < seqs.get(1).size(); j++)
         {
           String p2 = seqs.get(1).get(j);
           String par = p1 + "+" + p2;
           ;
           l_par.add(par);

           //comb.add( par);
         }
       }
   comb.add(l_par);
     }else
     {
                System.err.println("not yet implemented." + seqs);
     }

         {if (true) return comb;}
    throw new Error("Missing return statement in function");
  }

  final public List<String > genes() throws ParseException {
  List<String > gs = new ArrayList<String >();
  String head;
  String g;
    head = gene();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 9:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      jj_consume_token(9);
      g = gene();
          gs.add(g);
    }
                gs.add(head);
                {if (true) return gs;}
    throw new Error("Missing return statement in function");
  }

  final public String gene() throws ParseException {
  Token t1;
    t1 = jj_consume_token(GENE);
        {if (true) return t1.toString();}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public RegrasTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xa0,0x40,0xa0,0x200,0xa0,0xa0,0x20,0x40,0x200,};
   }

  /** Constructor with InputStream. */
  public Regras(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Regras(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RegrasTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Regras(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RegrasTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Regras(RegrasTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RegrasTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[10];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 10; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  /*
  public static void main(String args []) throws ParseException
  {
    Regras parser = new Regras(System.in);

      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");
      try
      {
        System.out.println( Regras.def());
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Regras.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
    }
  */
}
